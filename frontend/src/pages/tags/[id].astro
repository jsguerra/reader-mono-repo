---
import Layout from "@layout/Layout.astro";
import Grid from "@components/Grid/Grid";
import Figure from "@components/figure/Figure";
import Pagination from "@components/Pagination/Pagination";
import type { Book, Tag } from "@common/common";
import { siteURL, serverURL } from "@common/common";

interface ApiResponse {
  page: number;
  limit: number;
  tag: Tag;
}

const { id } = Astro.params;
const response = await fetch(`${serverURL}/tags/${id}`);
const { page, limit, tag } = (await response.json()) as ApiResponse;
const books = tag.books;
const records = tag._count.books;
const pages = Math.ceil(records / limit);
---

<Layout>
  <div class="container container-variant">
    <h1>Tag: {tag.name}</h1>
    <a class="btn" href={`${siteURL}/admin/tag/${id}`}>Edit Tag</a>
    <p>Total books: {tag.books.length}</p>
  </div>
  <Grid books={books} client:load>
    {books.length <= 0 && <p>There are currently no books in the library.</p>}
    {
      books.map((book: Book) => {
        const letterDirectory = book.author.name.charAt(0).toLowerCase();
        const firstImage = book.pages?.split(", ");
        let thumbnail = "";
        if (firstImage) {
          thumbnail = firstImage[0];
        }

        return (
          <a href={`${siteURL}/books/${book.id}`}>
            <Figure
              imageUrl={`${serverURL}/books/${letterDirectory}/${book.author.slug}/${book.slug}/${thumbnail}`}
              title={book.title}
            />
          </a>
        );
      })
    }
  </Grid>
  {pages >= 2 && <Pagination page={page} pages={pages} />}
</Layout>
